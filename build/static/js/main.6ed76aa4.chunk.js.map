{"version":3,"sources":["hello.worker.js","App.tsx","webworker.ts","serviceWorker.ts","index.tsx"],"names":["hello_worker","self","addEventListener","event","console","log","initial","data","setInterval","postMessage","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","WebWorker","myWorker","state","counter","_this2","setState","react_default","a","createElement","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAEe,IAAAA,EAAA,WACbC,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BC,QAAQC,IAAI,SACZ,IAAIC,EAAUH,EAAMI,KACpBC,YAAY,WACVJ,QAAQC,IAAI,QAASC,GACrBL,KAAKQ,YAAYH,MAChB,QCeQI,cAlBb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFRQ,OCLa,SAAmBA,GAChC,IAAMC,EAAOD,EAAOE,WACpBjB,QAAQC,IAAI,CAAEe,SACd,IAAME,EAAO,IAAIC,KAAK,CAAC,IAAMH,EAAO,QACpC,OAAO,IAAII,OAAOC,IAAIC,gBAAgBJ,IDC7BK,CAAUC,GAGjBhB,EAAKiB,MAAQ,CAAEC,QAAS,GACxBlB,EAAKO,OAAOV,YAAY,GAHFG,mFAMJ,IAAAmB,EAAAhB,KAClBA,KAAKI,OAAOjB,iBAAiB,UAAW,SAACC,GACvCC,QAAQC,IAAI,CAAEF,UACd4B,EAAKC,SAAS,CAAEF,QAAS3B,EAAMI,0CAKjC,OAAO0B,EAAAC,EAAAC,cAAA,oBAAYpB,KAAKc,MAAMC,gBAhBhBM,aEQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ed76aa4.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\n\nexport default () => {\n  self.addEventListener(\"message\", event => {\n    console.log(\"start\");\n    let initial = event.data;\n    setInterval(() => {\n      console.log(\"count\", initial);\n      self.postMessage(initial++);\n    }, 1000);\n  });\n};\n","import React, { Component } from \"react\";\nimport WebWorker from \"./webworker\";\nimport myWorker from \"./hello.worker.js\";\n\nclass App extends Component<{}, { counter: number }> {\n  worker = WebWorker(myWorker);\n  constructor(props: any) {\n    super(props);\n    this.state = { counter: 0 };\n    this.worker.postMessage(0);\n  }\n\n  componentDidMount() {\n    this.worker.addEventListener(\"message\", (event: any) => {\n      console.log({ event });\n      this.setState({ counter: event.data });\n    });\n  }\n\n  render() {\n    return <div>worker{this.state.counter}</div>;\n  }\n}\n\nexport default App;\n","export default function WebWorker(worker: any) {\n  const code = worker.toString();\n  console.log({ code });\n  const blob = new Blob([\"(\" + code + \")()\"]);\n  return new Worker(URL.createObjectURL(blob));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}