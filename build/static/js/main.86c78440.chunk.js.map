{"version":3,"sources":["components/statistics/worker.ts","input.txt","utill/\bcalc.ts","components/statistics/view.tsx","components/statistics/index.tsx","utill/fit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","__webpack_require__","p","twopos2y","p1","p2","x","y","StatisticsView","_this$props","this","props","width","height","input","res","react","inputX","map","item","inputY","xMax","Math","max","apply","Object","toConsumableArray","yMax","xM","yM","d3","domain","range","points","m","b","exp2y","exp2x","pos","className","transform","concat","ref","node","select","call","axisBottom","ticks","axisLeft","i","key","r","cx","cy","fill","style","stroke","d","React","Statistics","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","worker","state","undefined","addEventListener","event","console","log","setState","data","nextProps","postMessage","view_StatisticsView","MeasureWrap","_this2","_this$state","index_esm","bounds","onResize","contentRect","objectSpread","_ref","measureRef","target","csv","require","App","fetch","text","raw","split","slice","arr","num","parseInt","shift","react_default","a","createElement","fit_MeasureWrap","statistics_Statistics","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wEAAAA,EAAAC,QAAA,WACA,WAAAC,OAAoBC,EAAAC,EAAuB,2FCD3CJ,EAAAC,QAAiBE,EAAAC,EAAuB,yMCAjC,SAASC,EACdC,EACAC,EACAC,GAEA,OAASD,EAAGE,EAAIH,EAAGG,IAAMF,EAAGC,EAAIF,EAAGE,IAAOA,EAAIF,EAAGE,GAAKF,EAAGG,MCQtCC,mLACV,IAAAC,EAC+BC,KAAKC,MAAnCC,EADDH,EACCG,MAAOC,EADRJ,EACQI,OAAQC,EADhBL,EACgBK,MAAOC,EADvBN,EACuBM,IAE9B,IAAKD,EAAO,OAAOE,EAAA,0BAEnB,IAAMC,EAASH,EAAMI,IAAI,SAAAC,GAAI,OAAIA,EAAK,KAChCC,EAASN,EAAMI,IAAI,SAAAC,GAAI,OAAIA,EAAK,KAEhCE,EAAOC,KAAKC,IAALC,MAAAF,KAAIG,OAAAC,EAAA,EAAAD,CAAQR,IACnBU,EAAOL,KAAKC,IAALC,MAAAF,KAAIG,OAAAC,EAAA,EAAAD,CAAQL,IACnBQ,EAAKP,EAAOA,EAAO,GACnBQ,EAAKF,EAAOA,EAAO,GAEnBrB,EAAIwB,MAEPC,OAAO,CAAC,EAAGH,IACXI,MAAM,CAAC,EAAGpB,IAEPL,EAAIuB,MAEPC,OAAO,CAAC,EAAGF,IACXG,MAAM,CAACnB,EAAQ,IAEZoB,EACJlB,GACA,CAAC,CAAC,ED/BD,SAAemB,EAAWC,EAAW7B,GAC1C,OAAO4B,EAAI5B,EAAI6B,EC8BNC,CAAMrB,EAAImB,EAAGnB,EAAIoB,EAAG,IAAK,CD3B7B,SAAeD,EAAWC,EAAW5B,GAC1C,OAAQA,EAAI4B,GAAKD,EC0BkBG,CAAMtB,EAAImB,EAAGnB,EAAIoB,EAAGN,GAAKA,IAAKX,IAAI,SAAAC,GAC/D,MAAO,CAAEb,EAAGa,EAAK,GAAIZ,EAAGY,EAAK,MAG3BmB,EAAML,GAAU,CACpB,CAAC,EAAG9B,EAAS8B,EAAO,GAAIA,EAAO,GAAI,IACnC,CAACL,EAAIzB,EAAS8B,EAAO,GAAIA,EAAO,GAAIL,KAGtC,OACEZ,EAAA,qBAAKuB,UAAU,aAAa3B,MAAOA,EAAOC,OAAQA,GAChDG,EAAA,mBAAGwB,UAAS,qBACVxB,EAAA,mBACEuB,UAAU,eACVC,UAAS,eAAAC,OAAiB5B,EAAjB,KACT6B,IAAK,SAAAC,GAAI,OAAIC,YAAOD,GAAME,KAAKC,YAAWxC,GAAGyC,MAAM,QAErD/B,EAAA,mBACEuB,UAAU,eACVC,UAAS,iBACTE,IAAK,SAAAC,GAAI,OAAIC,YAAOD,GAAME,KAAKG,YAASzC,GAAGwC,MAAM,QAElDjC,EAAMI,IAAI,SAACC,EAAM8B,GAAP,OACTjC,EAAA,mBAAGuB,UAAU,SAASW,IAAKD,GACzBjC,EAAA,wBAAQmC,EAAG,EAAGC,GAAI9C,EAAEa,EAAK,IAAKkC,GAAI9C,EAAEY,EAAK,IAAKmC,KAAK,aAGtDvC,GACCC,EAAA,mBAAGuB,UAAU,SACXvB,EAAA,sBACEuB,UAAU,OACVgB,MAAO,CAAEC,OAAQ,SACjBC,EACE3B,MAEGxB,EAAE,SAACmD,GAAD,OAAYnD,EAAEmD,EAAE,MAClBlD,EAAE,SAACkD,GAAD,OAAYlD,EAAEkD,EAAE,KAHrB3B,CAG0BQ,GAE5BgB,KAAK,mBAhEuBI,aCHvBC,cAKnB,SAAAA,EAAYhD,GAAc,IAAAiD,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAf,KAAAiD,IACxBC,EAAAnC,OAAAqC,EAAA,EAAArC,CAAAf,KAAAe,OAAAsC,EAAA,EAAAtC,CAAAkC,GAAAd,KAAAnC,KAAMC,KAFRqD,OAAS,IAAIhE,IAGX4D,EAAKK,MAAQ,CAAElD,SAAKmD,GACpBN,EAAKI,OAAOG,iBAAiB,UAAW,SAACC,GACvCC,QAAQC,IAAI,CAAEF,UACdR,EAAKW,SAAS,CAAExD,IAAKqD,EAAMI,SALLZ,mFASNa,GACdA,EAAU3D,OAASJ,KAAKC,MAAMG,OAChCJ,KAAKsD,OAAOU,YAAYD,EAAU3D,wCAG7B,IAAAL,EAC0BC,KAAKC,MAA9BC,EADDH,EACCG,MAAOC,EADRJ,EACQI,OAAQC,EADhBL,EACgBK,MACfC,EAAQL,KAAKuD,MAAblD,IACR,OACEC,EAAA,cAAC2D,EAAD,CAAgB/D,MAAOA,EAAOC,OAAQA,EAAQC,MAAOA,EAAOC,IAAKA,WAvB/B2C,6BCNnBkB,cAInB,SAAAA,EAAYjE,GAAY,IAAAiD,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAf,KAAAkE,IACtBhB,EAAAnC,OAAAqC,EAAA,EAAArC,CAAAf,KAAAe,OAAAsC,EAAA,EAAAtC,CAAAmD,GAAA/B,KAAAnC,KAAMC,KACDsD,MAAQ,CAAErD,MAAO,EAAGC,OAAQ,GAFX+C,wEAKf,IAAAiB,EAAAnE,KAAAoE,EACmBpE,KAAKuD,MAAvBrD,EADDkE,EACClE,MAAOC,EADRiE,EACQjE,OACf,OACEG,EAAA,cAAC+D,EAAA,EAAD,CACEC,QAAM,EACNC,SAAU,SAAAC,GACHA,EAAYF,SACjBX,QAAQC,IAAI,WAAYY,EAAYF,QACpCH,EAAKN,SAAL9C,OAAA0D,EAAA,EAAA1D,CAAA,GAAmByD,EAAYF,YAGhC,SAAAI,GAAA,IAAGC,EAAHD,EAAGC,WAAH,OACCrE,EAAA,qBAAK0B,IAAK2C,EAAY9B,MAAO,CAAE3C,MAAO,OAAQC,OAAQ,SACnDgE,EAAKlE,MAAM2E,OAAO1E,EAAOC,aAtBG6C,aCDnC6B,EAAMC,EAAQ,IAmCLC,cA/Bb,SAAAA,EAAY9E,GAAY,IAAAiD,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAf,KAAA+E,IACtB7B,EAAAnC,OAAAqC,EAAA,EAAArC,CAAAf,KAAAe,OAAAsC,EAAA,EAAAtC,CAAAgE,GAAA5C,KAAAnC,KAAMC,KACDsD,MAAQ,GAFSL,yNAMJ8B,MAAMH,iBAAlBxE,kBACaA,EAAI4E,cAAjBA,SACNtB,QAAQC,IAAI,CAAEqB,SACRC,EAAMD,EAAKE,MAAM,KAAKC,OAAO,GAAG,GAChCC,EAAMH,EAAIC,MAAM,QAChB/E,EAAoBiF,EAAI7E,IAAI,SAAAC,GAAI,OACpCA,EAAK0E,MAAM,KAAK3E,IAAI,SAAA8E,GAAG,OAAIC,SAASD,QAEhCE,QACNxF,KAAK6D,SAAS,CAAEzD,8IAGT,IAAA+D,EAAAnE,KACP,OACEyF,EAAAC,EAAAC,cAAA,OAAK9C,MAAO,CAAE3C,MAAO,OAAQC,OAAQ,UACnCsF,EAAAC,EAAAC,cAACC,EAAD,CACEhB,OAAQ,SAACc,EAAGjE,GAAJ,OACNgE,EAAAC,EAAAC,cAACE,EAAD,CAAYzF,MAAO+D,EAAKZ,MAAMnD,MAAOF,MAAOwF,EAAGvF,OAAQsB,eAxBjDqE,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86c78440.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"00cef2f0c5652964f032.worker.js\");\n};","module.exports = __webpack_public_path__ + \"static/media/input.ce79d252.txt\";","export function twopos2y(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number },\n  x: number\n) {\n  return ((p2.y - p1.y) / (p2.x - p1.x)) * (x - p1.x) + p1.y;\n}\n\nexport function exp2y(m: number, b: number, x: number) {\n  return m * x + b;\n}\n\nexport function exp2x(m: number, b: number, y: number) {\n  return (y - b) / m;\n}\n\nexport function vectorDist(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number }\n) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n","import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { select, axisBottom, axisLeft } from \"d3\";\nimport { css } from \"emotion\";\nimport { exp2x, exp2y, twopos2y } from \"../../utill/\\bcalc\";\n\ninterface Props {\n  input?: number[][];\n  res?: { m: number; b: number };\n  width: number;\n  height: number;\n}\n\nexport default class StatisticsView extends React.Component<Props, {}> {\n  render() {\n    const { width, height, input, res } = this.props;\n\n    if (!input) return <div />;\n\n    const inputX = input.map(item => item[0]);\n    const inputY = input.map(item => item[1]);\n\n    const xMax = Math.max(...inputX);\n    const yMax = Math.max(...inputY);\n    const xM = xMax + xMax / 10;\n    const yM = yMax + yMax / 10;\n\n    const x = d3\n      .scaleLinear()\n      .domain([0, xM])\n      .range([0, width]);\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, yM])\n      .range([height, 0]);\n\n    const points =\n      res &&\n      [[0, exp2y(res.m, res.b, 0)], [exp2x(res.m, res.b, yM), yM]].map(item => {\n        return { x: item[0], y: item[1] };\n      });\n\n    const pos = points && [\n      [0, twopos2y(points[0], points[1], 0)],\n      [xM, twopos2y(points[0], points[1], xM)]\n    ];\n\n    return (\n      <svg className=\"line-chart\" width={width} height={height}>\n        <g transform={`translate(50,-30)`}>\n          <g\n            className=\"axis axis--x\"\n            transform={`translate(0,${height})`}\n            ref={node => select(node).call(axisBottom(x).ticks(10))}\n          />\n          <g\n            className=\"axis axis--y\"\n            transform={`translate(0,0)`}\n            ref={node => select(node).call(axisLeft(y).ticks(10))}\n          />\n          {input.map((item, i) => (\n            <g className=\"circle\" key={i}>\n              <circle r={5} cx={x(item[0])} cy={y(item[1])} fill=\"black\" />\n            </g>\n          ))}\n          {res && (\n            <g className=\"graph\">\n              <path\n                className=\"line\"\n                style={{ stroke: \"black\" }}\n                d={\n                  d3\n                    .line()\n                    .x((d: any) => x(d[0]))\n                    .y((d: any) => y(d[1]))(pos as any) as any\n                }\n                fill=\"none\"\n              />\n            </g>\n          )}\n        </g>\n      </svg>\n    );\n  }\n}\n","import * as React from \"react\";\nimport Worker from \"worker-loader!./worker\";\nimport StatisticsView from \"./view\";\n\ninterface Props {\n  input?: number[][];\n  width: number;\n  height: number;\n}\n\nexport default class Statistics extends React.Component<\n  Props,\n  { res?: { m: number; b: number } }\n> {\n  worker = new Worker();\n  constructor(props: Props) {\n    super(props);\n    this.state = { res: undefined };\n    this.worker.addEventListener(\"message\", (event: any) => {\n      console.log({ event });\n      this.setState({ res: event.data });\n    });\n  }\n\n  componentWillUpdate(nextProps: Props) {\n    if (nextProps.input != this.props.input)\n      this.worker.postMessage(nextProps.input);\n  }\n\n  render() {\n    const { width, height, input } = this.props;\n    const { res } = this.state;\n    return (\n      <StatisticsView width={width} height={height} input={input} res={res} />\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport Measure from \"react-measure\";\n\nexport default class MeasureWrap extends React.Component<\n  { target: (width: number, height: number) => any },\n  { width: number; height: number }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n  }\n\n  render() {\n    const { width, height } = this.state;\n    return (\n      <Measure\n        bounds\n        onResize={contentRect => {\n          if (!contentRect.bounds) return;\n          console.log(\"size hoc\", contentRect.bounds);\n          this.setState({ ...contentRect.bounds });\n        }}\n      >\n        {({ measureRef }) => (\n          <div ref={measureRef} style={{ width: \"100%\", height: \"100%\" }}>\n            {this.props.target(width, height)}\n          </div>\n        )}\n      </Measure>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Worker from \"worker-loader!./hello.worker\";\nimport Statistics from \"./components/statistics/index\";\nconst csv = require(\"./input.txt\");\nimport MeasureWrap from \"./utill/fit\";\n\nclass App extends Component<{}, { input?: number[][] }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const res = await fetch(csv);\n    const text = await res.text();\n    console.log({ text });\n    const raw = text.split(\" \").slice(-1)[0];\n    const arr = raw.split(\"\\\\n\");\n    const input: number[][] = arr.map(item =>\n      item.split(\",\").map(num => parseInt(num))\n    );\n    input.shift();\n    this.setState({ input });\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100vh\" }}>\n        <MeasureWrap\n          target={(a, b) => (\n            <Statistics input={this.state.input} width={a} height={b} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}