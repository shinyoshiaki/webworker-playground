{"version":3,"sources":["components/statistics/worker.ts","input.txt","utill/\bcalc.ts","components/statistics/index.tsx","utill/fit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","__webpack_require__","p","twopos2y","p1","p2","x","y","Statistics","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","worker","state","res","undefined","addEventListener","event","console","log","setState","data","nextProps","input","postMessage","_this$props","width","height","react","inputX","map","item","inputY","xMax","Math","max","apply","toConsumableArray","yMax","xM","yM","points","m","b","exp2y","exp2x","pos","d3","domain","range","className","transform","concat","ref","node","select","axisBottom","ticks","axisLeft","i","key","r","cx","cy","fill","style","stroke","d","React","MeasureWrap","_this2","_this$state","index_esm","bounds","onResize","contentRect","objectSpread","_ref","measureRef","target","csv","require","App","fetch","text","raw","split","slice","arr","num","parseInt","shift","react_default","a","createElement","fit_MeasureWrap","statistics_Statistics","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2132635f.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"00cef2f0c5652964f032.worker.js\");\n};","module.exports = __webpack_public_path__ + \"static/media/input.ce79d252.txt\";","export function twopos2y(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number },\n  x: number\n) {\n  return ((p2.y - p1.y) / (p2.x - p1.x)) * (x - p1.x) + p1.y;\n}\n\nexport function exp2y(m: number, b: number, x: number) {\n  return m * x + b;\n}\n\nexport function exp2x(m: number, b: number, y: number) {\n  return (y - b) / m;\n}\n\nexport function vectorDist(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number }\n) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n","import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { select, axisBottom, axisLeft } from \"d3\";\nimport { css } from \"emotion\";\nimport Worker from \"worker-loader!./worker\";\nimport { exp2x, exp2y, twopos2y } from \"../../utill/\\bcalc\";\n\ninterface Props {\n  input?: number[][];\n  width: number;\n  height: number;\n}\n\nexport default class Statistics extends React.Component<\n  Props,\n  { res?: { m: number; b: number } }\n> {\n  worker = new (Worker as any)();\n  constructor(props: Props) {\n    super(props);\n    this.state = { res: undefined };\n    this.worker.addEventListener(\"message\", (event: any) => {\n      console.log({ event });\n      this.setState({ res: event.data });\n    });\n  }\n\n  componentWillUpdate(nextProps: Props) {\n    if (nextProps.input != this.props.input)\n      this.worker.postMessage(nextProps.input);\n  }\n\n  render() {\n    const { width, height, input } = this.props;\n    const { res } = this.state;\n    if (!input || !res) return <div />;\n\n    const inputX = input.map(item => item[0]);\n    const inputY = input.map(item => item[1]);\n\n    const xMax = Math.max(...inputX);\n    const yMax = Math.max(...inputY);\n    const xM = xMax + xMax / 10;\n    const yM = yMax + yMax / 10;\n\n    const points = [\n      [0, exp2y(res.m, res.b, 0)],\n      [exp2x(res.m, res.b, yM), yM]\n    ].map(item => {\n      return { x: item[0], y: item[1] };\n    });\n\n    console.log({ points });\n\n    const pos = [\n      [0, twopos2y(points[0], points[1], 0)],\n      [xM, twopos2y(points[0], points[1], xM)]\n    ];\n\n    const x = d3\n      .scaleLinear()\n      .domain([0, xM])\n      .range([0, width]);\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, yM])\n      .range([height, 0]);\n\n    console.log({ pos });\n\n    return (\n      <svg className=\"line-chart\" width={width} height={height}>\n        <g transform={`translate(50,-30)`}>\n          <g\n            className=\"axis axis--x\"\n            transform={`translate(0,${height})`}\n            ref={node => select(node).call(axisBottom(x).ticks(10))}\n          />\n          <g\n            className=\"axis axis--y\"\n            transform={`translate(0,0)`}\n            ref={node => select(node).call(axisLeft(y).ticks(10))}\n          />\n          {input.map((item, i) => (\n            <g className=\"circle\" key={i}>\n              <circle r={5} cx={x(item[0])} cy={y(item[1])} fill=\"black\" />\n            </g>\n          ))}\n          <g className=\"graph\">\n            <path\n              className=\"line\"\n              style={{ stroke: \"black\" }}\n              d={\n                d3\n                  .line()\n                  .x((d: any) => x(d[0]))\n                  .y((d: any) => y(d[1]))(pos as any) as any\n              }\n              fill=\"none\"\n            />\n          </g>\n        </g>\n      </svg>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport Measure from \"react-measure\";\n\nexport default class MeasureWrap extends React.Component<\n  { target: (width: number, height: number) => any },\n  { width: number; height: number }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n  }\n\n  render() {\n    const { width, height } = this.state;\n    return (\n      <Measure\n        bounds\n        onResize={contentRect => {\n          if (!contentRect.bounds) return;\n          console.log(\"size hoc\", contentRect.bounds);\n          this.setState({ ...contentRect.bounds });\n        }}\n      >\n        {({ measureRef }) => (\n          <div ref={measureRef} style={{ width: \"100%\", height: \"100%\" }}>\n            {this.props.target(width, height)}\n          </div>\n        )}\n      </Measure>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Worker from \"worker-loader!./hello.worker\";\nimport Statistics from \"./components/statistics/index\";\nconst csv = require(\"./input.txt\");\nimport MeasureWrap from \"./utill/fit\";\n\nclass App extends Component<{}, { input?: number[][] }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const res = await fetch(csv);\n    const text = await res.text();\n    console.log({ text });\n    const raw = text.split(\" \").slice(-1)[0];\n    const arr = raw.split(\"\\\\n\");\n    const input: number[][] = arr.map(item =>\n      item.split(\",\").map(num => parseInt(num))\n    );\n    input.shift();\n    this.setState({ input });\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100vh\" }}>\n        some\n        <MeasureWrap\n          target={(a, b) => (\n            <Statistics input={this.state.input} width={a} height={b} />\n          )}\n        />\n        some\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}